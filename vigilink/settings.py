"""
Django settings for vigilink project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from a local .env file if present (dev convenience)
# This avoids needing python-dotenv and only sets vars that aren't already set.
_env_file = BASE_DIR / '.env'
if _env_file.exists():
    try:
        with _env_file.open('r', encoding='utf-8') as _f:
            for _raw in _f:
                _line = _raw.strip()
                if not _line or _line.startswith('#') or '=' not in _line:
                    continue
                _key, _val = _line.split('=', 1)
                _key = _key.strip()
                _val = _val.strip()
                if _val and _val[0] == _val[-1] and _val[0] in ('"', "'"):
                    _val = _val[1:-1]
                os.environ.setdefault(_key, _val)
    except Exception:
        # If .env parsing fails, ignore and proceed with existing environment
        pass


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Read from environment if provided; fall back to a dev-only key.
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-)#k6@ho08g)@ppw+tn-p_dm59y9(!2=s%=5ajw&o(g_%rf^%ye')

# SECURITY WARNING: don't run with debug turned on in production!
# Default to True for local development unless DJANGO_DEBUG explicitly set.
DEBUG = os.environ.get('DJANGO_DEBUG', 'True').lower() in ('1', 'true', 'yes')

# Hosts and CSRF from env (commaâ€‘separated)
def _csv(name, default=""):
    raw = os.environ.get(name, default)
    if not raw:
        return []
    return [h.strip() for h in raw.split(',') if h.strip()]

ALLOWED_HOSTS = _csv('ALLOWED_HOSTS', '*') if not DEBUG else ['*']
CSRF_TRUSTED_ORIGINS = _csv('CSRF_TRUSTED_ORIGINS')



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'accounts',
    'user_panel',
    'admin_panel',
    'communityowner_panel',
    'resident_panel',
    'security_panel'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    # WhiteNoise only needed in production; enable when DEBUG is False
    *(['whitenoise.middleware.WhiteNoiseMiddleware'] if not DEBUG else []),
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'user_panel.middleware.LoginRequiredMiddleware',  # Custom middleware to enforce login for dashboard pages
]

ROOT_URLCONF = 'vigilink.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'vigilink.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database
# Default to SQLite for local development. Set USE_POSTGRES=true to use Postgres.
USE_POSTGRES = os.environ.get('USE_POSTGRES', '').lower() in ('1', 'true', 'yes')

if USE_POSTGRES:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.environ.get('POSTGRES_DB', 'vigilink_db'),
            'USER': os.environ.get('POSTGRES_USER', 'vigilink_user'),
            'PASSWORD': os.environ.get('POSTGRES_PASSWORD', ''),
            'HOST': os.environ.get('POSTGRES_HOST', 'localhost'),
            'PORT': os.environ.get('POSTGRES_PORT', '5432'),
            # Use a short persistent connection or disable by setting 0.
            'CONN_MAX_AGE': int(os.environ.get('POSTGRES_CONN_MAX_AGE', '60')),
            # Health-check DB connection at the start of each request so Django
            # transparently reconnects if the provider closed the connection
            # (common with serverless DBs and poolers like Neon).
            'CONN_HEALTH_CHECKS': os.environ.get('POSTGRES_CONN_HEALTH_CHECKS', 'True').lower() in ('1', 'true', 'yes'),
            'OPTIONS': {
                # Ensure TLS for providers like Neon; falls back to PGSSLMODE if set.
                'sslmode': os.environ.get('POSTGRES_SSLMODE', os.environ.get('PGSSLMODE', 'require')),
                # Avoid long waits on broken networks.
                'connect_timeout': int(os.environ.get('POSTGRES_CONNECT_TIMEOUT', '10')),
            },
            # psycopg honors libpq env like PGSSLMODE; no extra config required here
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Define static files directories (for local dev; collected to STATIC_ROOT in prod)
STATICFILES_DIRS = [
    BASE_DIR / 'accounts' / 'static',
    BASE_DIR / 'admin_panel' / 'static',
    BASE_DIR / 'user_panel' / 'static',
]

# WhiteNoise static files storage (hashed files, compression) only in production
if not DEBUG:
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Media files (User uploads)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'user_panel.middleware': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}

# Custom User Model
AUTH_USER_MODEL = 'accounts.User'

# Login/Logout URLs
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'
LOGIN_URL = '/accounts/login/'

# Email Configuration
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # For development - prints emails to console
# For production, use SMTP backend:
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
# Read SMTP creds from environment (no hardcoded secrets)
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')

# Verification settings
VERIFICATION_CODE_EXPIRY_MINUTES = 10

# Dropbox configuration
# Access token (legacy/short-lived) and token file
DROPBOX_ACCESS_TOKEN = os.environ.get('DROPBOX_ACCESS_TOKEN', '')
DROPBOX_TOKEN_FILE = BASE_DIR / 'dropbox_token.txt'

# App credentials for refresh-token flow
DROPBOX_APP_KEY = os.environ.get('DROPBOX_APP_KEY', '')
DROPBOX_APP_SECRET = os.environ.get('DROPBOX_APP_SECRET', '')

# Honor X-Forwarded-Proto (for Render/Heroku behind proxy)
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SESSION_COOKIE_SECURE = not DEBUG
CSRF_COOKIE_SECURE = not DEBUG

# Refresh token (preferred for production); optional file path for convenience
DROPBOX_REFRESH_TOKEN = os.environ.get('DROPBOX_REFRESH_TOKEN', '')
DROPBOX_REFRESH_TOKEN_FILE = BASE_DIR / 'dropbox_refresh_token.txt'
